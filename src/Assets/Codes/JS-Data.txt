
"-------------------- Example 1 (w.r.t ReactJs) --------------------",

Problems may occur with variabes
some common problems that developers may encounter with variables in JavaScript

1. Hoisting

[
    "Problem: In a React component, you reference a variable before it's declared, leading to unexpected behavior due to hoisting.",
    "",
    "import React, { useEffect } from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  useEffect(() => {",
    "    console.log(message); // Output: undefined",
    "  }, []);",
    "",
    "  const message = 'Hello, world!';",
    "  ",
    "  return <p>{message}</p>;",
    "};",
    "",
    "export default ExampleComponent;",
    "",
    "Solution: Ensure that variables are declared before they are referenced to avoid hoisting issues.",
    "",
    "import React, { useEffect } from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const message = 'Hello, world!';",
    "",
    "  useEffect(() => {",
    "    console.log(message); // Output: \"Hello, world!\"",
    "  }, []);",
    "  ",
    "  return <p>{message}</p>;",
    "};",
    "",
    "export default ExampleComponent;"
]




2. Variable Shadowing

[
    "Problem: In a React component, you declare a variable with the same name as an outer scope variable, leading to variable shadowing and unexpected behavior.",
    "",
    "import React from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const message = 'Outer message';",
    "  ",
    "  const handleClick = () => {",
    "    const message = 'Inner message'; // Shadows the outer 'message' variable",
    "    console.log(message); // Output: \"Inner message\"",
    "  };",
    "",
    "  return (",
    "    <button onClick={handleClick}>Click me</button>",
    "  );",
    "};",
    "",
    "export default ExampleComponent;",
    "",
    "Solution: Use a different variable name to avoid shadowing the outer variable and clarify your code.",
    "",
    "import React from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const message = 'Outer message';",
    "  ",
    "  const handleClick = () => {",
    "    const innerMessage = 'Inner message'; // Use a different variable name",
    "    console.log(innerMessage); // Output: \"Inner message\"",
    "  };",
    "",
    "  return (",
    "    <button onClick={handleClick}>Click me</button>",
    "  );",
    "};",
    "",
    "export default ExampleComponent;"
]





3. Global Variables

[
    "Problem: In a React application, you unintentionally pollute the global scope by using global variables across multiple components.",
    "",
    "Solution: Avoid using global variables directly. Instead, use React context or state management libraries like Redux to share data across components.",
    "",
    "// GlobalState.js",
    "import React, { createContext, useContext, useState } from 'react';",
    "",
    "const GlobalStateContext = createContext();",
    "",
    "export const useGlobalState = () => useContext(GlobalStateContext);",
    "",
    "export const GlobalStateProvider = ({ children }) => {",
    "  const [count, setCount] = useState(0);",
    "",
    "  return (",
    "    <GlobalStateContext.Provider value={{ count, setCount }}>",
    "      {children}",
    "    </GlobalStateContext.Provider>",
    "  );",
    "};",
    "",
    "// Component1.js",
    "import React from 'react';",
    "import { useGlobalState } from './GlobalState';",
    "",
    "const Component1 = () => {",
    "  const { count } = useGlobalState();",
    "  ",
    "  return <p>{count}</p>;",
    "};",
    "",
    "export default Component1;",
    "",
    "// Component2.js",
    "import React from 'react';",
    "import { useGlobalState } from './GlobalState';",
    "",
    "const Component2 = () => {",
    "  const { count } = useGlobalState();",
    "  ",
    "  return <button onClick={() => setCount(count + 1)}>Increment Count</button>;",
    "};",
    "",
    "export default Component2;"
]




4. Mutable Data with var

[
    "Problem: In a React component, you encounter unexpected behavior when using var to declare variables within a loop due to variable hoisting.",
    "",
    "import React, { useState, useEffect } from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const [items, setItems] = useState([1, 2, 3]);",
    "",
    "  useEffect(() => {",
    "    for (var i = 0; i < items.length; i++) {",
    "      setTimeout(() => {",
    "        console.log(items[i]); // Output: 3 3 3",
    "      }, 1000);",
    "    }",
    "  }, []);",
    "",
    "  return (",
    "    <div>",
    "      {items.map(item => (",
    "        <p key={item}>{item}</p>",
    "      ))}",
    "    </div>",
    "  );",
    "};",
    "",
    "export default ExampleComponent;",
    "",
    "Solution: Use let instead of var within loops to avoid hoisting issues and create a new lexical scope for each iteration.",
    "",
    "import React, { useState, useEffect } from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const [items, setItems] = useState([1, 2, 3]);",
    "",
    "  useEffect(() => {",
    "    for (let i = 0; i < items.length; i++) {",
    "      setTimeout(() => {",
    "        console.log(items[i]); // Output: 1 2 3",
    "      }, 1000);",
    "    }",
    "  }, []);",
    "",
    "  return (",
    "    <div>",
    "      {items.map(item => (",
    "        <p key={item}>{item}</p>",
    "      ))}",
    "    </div>",
    "  );",
    "};",
    "",
    "export default ExampleComponent;"
]



5. Variable Reassignment

[
    "Problem: In a React component, you accidentally reassign a constant variable, leading to unexpected behavior.",
    "",
    "import React from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const PORT = 3000;",
    "  // Later in the code...",
    "  PORT = 4000; // Error: Cannot assign to 'PORT' because it is a constant",
    "};",
    "",
    "Solution: Use let or const to declare variables when their value should not be reassigned within the component.",
    "",
    "import React from 'react';",
    "",
    "const ExampleComponent = () => {",
    "  const PORT = 3000;",
    "  // Later in the code...",
    "  // PORT = 4000; // Throws error: Cannot assign to 'PORT' because it is a constant",
    "};"
]

---------------------------------------------------------------------

