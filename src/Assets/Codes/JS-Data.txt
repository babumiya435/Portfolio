1. Storing Values

Variables are commonly used to store values that can be reused or modified later in the program

[
    "let age = 30;",
    "let name = \"John\";",
    "let isStudent = false;"
]



2. Performing Computations

Variables can hold the results of computations, making it easier to reuse the calculated values.

[
    "let num1 = 10;",
    "let num2 = 5;",
    "let sum = num1 + num2;",
    "console.log(\"The sum of \" + num1 + \" and \" + num2 + \" is \" + sum);"
]




3. Managing State

Variables are used to track the state of an application or store information about the current state.

[
    "let isLoggedIn = false;",
    "if (isLoggedIn) {",
    "    console.log(\"User is logged in.\");",
    "} else {",
    "    console.log(\"User is not logged in.\");",
    "}"
]



4. Loop Iterations

Variables are often used as loop counters or iterators to control the flow of execution in loops.

[
    "for (let i = 0; i < 5; i++) {",
    "    console.log(\"Iteration \" + (i + 1));",
    "}"
]



5. Function Parameters and Return Values

Variables can be used to pass values to functions as parameters and to store return values from functions.

[
    "function greet(name) {",
    "    return \"Hello, \" + name + \"!\";",
    "}",
    "",
    "let message = greet(\"Alice\");",
    "console.log(message);"
]



6. Dynamic Data Manipulation

Variables enable dynamic data manipulation, allowing developers to update values based on conditions or user input.

[
    "let score = 80;",
    "if (score >= 70) {",
    "    console.log(\"Congratulations! You passed the exam.\");",
    "} else {",
    "    console.log(\"Sorry, you failed the exam.\");",
    "}"
]


7. Scope Management

Variables help in managing variable scope, controlling where variables are accessible within a program.

[
    "function greet() {",
    "    let message = \"Hello, world!\";",
    "    console.log(message);",
    "}",
    "",
    "greet();",
    "// console.log(message); // This will throw an error as 'message' is not accessible outside the function scope."
]



------------------------------------------------------------

Problems may occur with variabes
some common problems that developers may encounter with variables in JavaScript

1. Hoisting

Problem: In a web application, you have a function that references a variable declared later in the code, leading to undefined errors due to hoisting.

function greet() {
    console.log("Hello, " + name); // Output: "Hello, undefined"
}

greet();
var name = "John";

Solution: Use let or const to declare variables instead of var to avoid hoisting issues.

function greet() {
    console.log("Hello, " + name); // Output: "Hello, John"
}

//greet();   // if we try to call greet() before name declaration - throws "ReferenceError: Cannot access 'name' before initialization"
let name = "John";
greet();



3. Global Variables

// File 1
var count = 0;

// File 2
console.log(count); // Unexpected output due to global variable usage


4. Mutable Data with var

Problem: In a frontend application, you encounter unexpected behavior when iterating over an array due to variable reassignment.

for (var i = 0; i < 3; i++) {
    setTimeout(function() {
        console.log(i); // Output: 3 3 3
    }, 1000);
}


Solution: Use an IIFE (Immediately Invoked Function Expression) to create a new scope for each iteration and avoid variable sharing.

for (var i = 0; i < 3; i++) {
    (function(index) {
        setTimeout(function() {
            console.log(index); // Output: 0 1 2
        }, 1000);
    })(i);
}

or 

for (let i = 0; i < 3; i++) {
    setTimeout(function() {
        console.log(i); // Output: 3 3 3
    }, 1000);
}



5. Variable Reassignment


Problem: In a backend application, you accidentally reassign a constant variable, leading to unexpected behavior.



---------------------------------------------------------------------

