JS:

Classes:




Modules:



Generators:



---------------------------------------------------------------
Complex:
-------------------------------------------------

Higher-Order Functions and Function Composition:

const add = (a, b) => a + b;
const multiply = (a, b) => a * b;

const compose = (...fns) => arg => fns.reduceRight((acc, fn) => fn(acc), arg);

const addThenMultiply = compose(multiply.bind(null, 2), add);
console.log(addThenMultiply(3, 4)); // Output: (3 + 4) * 2 = 14


Currying:

const multiply = (a) => (b) => a * b;
const multiplyBy2 = multiply(2);

console.log(multiplyBy2(3)); // Output: 6

Memoization

const memoize = (fn) => {
    const cache = {};
    return (...args) => {
        const key = JSON.stringify(args);
        return cache[key] || (cache[key] = fn(...args));
    };
};

const fibonacci = memoize((n) => {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
});

console.log(fibonacci(10)); // Output: 55



Object Destructuring with Default Values

const { name = 'Anonymous', age = 25 } = person;
console.log(name, age);

Array Destructuring with Rest Parameter

const numbers = [1, 2, 3, 4, 5];
const [first, second, ...rest] = numbers;
console.log(first, second, rest);


Asynchronous Iteration


const fetchUserData = async () => {
    const response = await fetch('https://api.example.com/users');
    const data = await response.json();
    return data;
};

const processUsers = async () => {
    const users = await fetchUserData();
    for await (const user of users) {
        console.log(user);
    }
};

processUsers();


Decorators (Experimental, requires Babel or TypeScript)

function Logger(target, name, descriptor) {
    const original = descriptor.value;
    descriptor.value = function(...args) {
        console.log(`Calling ${name} with arguments: ${args}`);
        return original.apply(this, args);
    };
    return descriptor;
}

class Calculator {
    @Logger
    add(a, b) {
        return a + b;
    }
}

const calc = new Calculator();
console.log(calc.add(2, 3)); // Output: Calling add with arguments: 2,3


Dynamic Import

async function loadModule() {
    const myModule = await import('./myModule.js');
    myModule.myFunction();
}

loadModule();